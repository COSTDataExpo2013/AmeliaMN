type = "rect",
from = list(data = "brush"),
properties = list(
update = list(
x = list(field = "data.x"),
y = list(field = "data.y"),
width = list(field = "data.width"),
height = list(field = "data.height"),
stroke = list(value = "#CCC"),
fill = list(value = "transparent"),
opacity = list(value = 1.0)
)
)
)
json <- toJSON(ps)
whisker.render("<script>
vg.parse.spec({{{json}}}, function(chart) {
gigvis.addChart('{{id}}', chart({el: '#{{id}}'}).update());
})
</script>")
}
# Custom content for the <head> of the webpage
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(carat, price, data=diamonds)),
plotToScript('vis2', qplot(clarity, price, data=diamonds)),
plotToScript('vis3', qplot(color, price, data=diamonds)),
plotToScript('vis4', qplot(cut, price, data=diamonds))
)
}
# Custom content for the <body> of the webpage
bodyFunc <- function() {
paste('<div class="plots">',
'<div id="vis"></div>',
'<div id="vis2"></div>',
'<div id="vis3"></div>',
'<div id="vis4"></div>',
'</div>')
}
rootDir <- system.file('', package='gigvis')
# Serves up files in the www directory
libServer <- Rook::File$new(file.path(rootDir, 'www'))
template <- paste(readLines(file.path(rootDir, 'index.html')), collapse='\n')
# This is our rook/httpuv app
app <- list(
call = function(req) {
# Try using static resources in www to fulfill the request
resp <- suppressWarnings(libServer$call(req))
if (resp$status == 200)
return(resp)
# Nothing static found; handle it dynamically if possible
switch (
req$PATH_INFO,
'/' = {
cat("Rendering page...\n")
print(system.time({
response <- list(status = 200L,
headers = list('Content-Type' = 'text/html'),
body = whisker.render(template,
list(head = headFunc(),
body = bodyFunc())))
}))
response
},
list(status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = 'Not found')
)
},
onWSOpen = function(ws) {
ws$onMessage(function(binary, message) {
if (binary) {
warning("Binary websocket message was not expected")
ws$close()
return()
}
msg <- fromJSON(message)
str(msg)
})
ws$onClose(function() {
})
}
)
runServer('0.0.0.0', 8101, app)
help(qplot)
help(plotToScript)
plotToScript <- function(id, plotObj) {
ps <- plot_spec(plotObj, embed_data=TRUE)
# Do some monkeypatching of the generated vega plotspec. The monkeypatching
# is very crude, assumes only 1 data item and 1 mark.
# Add a data source that will represent the brush
ps$data[[2]] <- list(
name = "brush",
values = list(
list(
x = 0, y = 0, width = 0, height = 0
)
)
)
# Change the mark specification to make it look a little nicer
ps$marks[[1]]$properties$update$size <- list(value = 20)
ps$marks[[1]]$properties$update$stroke <- list(value = "transparent")
ps$marks[[1]]$properties$update$opacity <- list(value = 0.5)
# Add a mark property set for selected (linked) data points
ps$marks[[1]]$properties$selected <- list(
fill=list(
value="#00CC00"
)
)
# Add a mark for the brushing rectangle
ps$marks[[2]] <- list(
type = "rect",
from = list(data = "brush"),
properties = list(
update = list(
x = list(field = "data.x"),
y = list(field = "data.y"),
width = list(field = "data.width"),
height = list(field = "data.height"),
stroke = list(value = "#CCC"),
fill = list(value = "transparent"),
opacity = list(value = 1.0)
)
)
)
json <- toJSON(ps)
whisker.render("<script>
vg.parse.spec({{{json}}}, function(chart) {
gigvis.addChart('{{id}}', chart({el: '#{{id}}'}).update());
})
</script>")
}
# Custom content for the <head> of the webpage
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(carat, price, data=diamonds, color=carat)),
plotToScript('vis2', qplot(clarity, price, data=diamonds)),
plotToScript('vis3', qplot(color, price, data=diamonds)),
plotToScript('vis4', qplot(cut, price, data=diamonds))
)
}
# Custom content for the <body> of the webpage
bodyFunc <- function() {
paste('<div class="plots">',
'<div id="vis"></div>',
'<div id="vis2"></div>',
'<div id="vis3"></div>',
'<div id="vis4"></div>',
'</div>')
}
rootDir <- system.file('', package='gigvis')
# Serves up files in the www directory
libServer <- Rook::File$new(file.path(rootDir, 'www'))
template <- paste(readLines(file.path(rootDir, 'index.html')), collapse='\n')
# This is our rook/httpuv app
app <- list(
call = function(req) {
# Try using static resources in www to fulfill the request
resp <- suppressWarnings(libServer$call(req))
if (resp$status == 200)
return(resp)
# Nothing static found; handle it dynamically if possible
switch (
req$PATH_INFO,
'/' = {
cat("Rendering page...\n")
print(system.time({
response <- list(status = 200L,
headers = list('Content-Type' = 'text/html'),
body = whisker.render(template,
list(head = headFunc(),
body = bodyFunc())))
}))
response
},
list(status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = 'Not found')
)
},
onWSOpen = function(ws) {
ws$onMessage(function(binary, message) {
if (binary) {
warning("Binary websocket message was not expected")
ws$close()
return()
}
msg <- fromJSON(message)
str(msg)
})
ws$onClose(function() {
})
}
)
runServer('0.0.0.0', 8101, app)
plotToScript <- function(id, plotObj) {
ps <- plot_spec(plotObj, embed_data=TRUE)
# Do some monkeypatching of the generated vega plotspec. The monkeypatching
# is very crude, assumes only 1 data item and 1 mark.
# Add a data source that will represent the brush
ps$data[[2]] <- list(
name = "brush",
values = list(
list(
x = 0, y = 0, width = 0, height = 0
)
)
)
# Change the mark specification to make it look a little nicer
ps$marks[[1]]$properties$update$size <- list(value = 20)
ps$marks[[1]]$properties$update$stroke <- list(value = "transparent")
ps$marks[[1]]$properties$update$opacity <- list(value = 0.5)
# Add a mark property set for selected (linked) data points
ps$marks[[1]]$properties$selected <- list(
fill=list(
value="#00CC00"
)
)
# Add a mark for the brushing rectangle
ps$marks[[2]] <- list(
type = "rect",
from = list(data = "brush"),
properties = list(
update = list(
x = list(field = "data.x"),
y = list(field = "data.y"),
width = list(field = "data.width"),
height = list(field = "data.height"),
stroke = list(value = "#CCC"),
fill = list(value = "transparent"),
opacity = list(value = 1.0)
)
)
)
json <- toJSON(ps)
whisker.render("<script>
vg.parse.spec({{{json}}}, function(chart) {
gigvis.addChart('{{id}}', chart({el: '#{{id}}'}).update());
})
</script>")
}
# Custom content for the <head> of the webpage
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(carat, price, data=diamonds, color=carat)),
plotToScript('vis2', qplot(clarity, price, data=diamonds)),
plotToScript('vis3', qplot(color, price, data=diamonds)),
plotToScript('vis4', qplot(cut, price, data=diamonds))
)
}
# Custom content for the <body> of the webpage
bodyFunc <- function() {
paste('<div class="plots">',
'<div id="vis"></div>',
'<div id="vis2"></div>',
'<div id="vis3"></div>',
'<div id="vis4"></div>',
'</div>')
}
rootDir <- system.file('', package='gigvis')
# Serves up files in the www directory
libServer <- Rook::File$new(file.path(rootDir, 'www'))
template <- paste(readLines(file.path(rootDir, 'index.html')), collapse='\n')
# This is our rook/httpuv app
app <- list(
call = function(req) {
# Try using static resources in www to fulfill the request
resp <- suppressWarnings(libServer$call(req))
if (resp$status == 200)
return(resp)
# Nothing static found; handle it dynamically if possible
switch (
req$PATH_INFO,
'/' = {
cat("Rendering page...\n")
print(system.time({
response <- list(status = 200L,
headers = list('Content-Type' = 'text/html'),
body = whisker.render(template,
list(head = headFunc(),
body = bodyFunc())))
}))
response
},
list(status = 404L,
headers = list('Content-Type' = 'text/plain'),
body = 'Not found')
)
},
onWSOpen = function(ws) {
ws$onMessage(function(binary, message) {
if (binary) {
warning("Binary websocket message was not expected")
ws$close()
return()
}
msg <- fromJSON(message)
str(msg)
})
ws$onClose(function() {
})
}
)
runServer('0.0.0.0', 8101, app)
runServer('0.0.0.0', 8101, app)
qplot(Response, Freq, data=csat)
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",])
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis1', qplot(Response, Freq, data=csat))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis1', qplot(Response, Freq, data=csat))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', ggplot(csat[csat$citystate=="St. Paul, MN",]) + aes(x=Response, y=Freq, fill=Response)+ geom_bar())
)
}
runServer('0.0.0.0', 8101, app)
help(qplot)
ggplot(csat[csat$citystate=="St. Paul, MN",]) + aes(x=Response, y=Freq, fill=Response)+ geom_bar()
qplot(Response, Freq, data=csat)
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN"])
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",])
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom=bar)
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom="bar")
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom="bar", color=Response)
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom="bar", colour=Response)
qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom="bar")
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",], geom="bar"))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",])
)
}
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",])
)
}
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",])
)
}
eadFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",]))
)
}
headFunc <- function() {
csat <- csat
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",]))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
gigvis(csat, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
csat <- sotc10[sample]
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
gigvis(mtc1, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
gigvis(csat, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
)
}
runServer('0.0.0.0', 8101, app)
help(gigvis.addChart)
gigvis(mtc1, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
gigvis
vis
headFunc <- function() {
csat <- sotc10[sampl]
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",]))
)
}
runServer('0.0.0.0', 8101, app)
headFunc <- function() {
diamonds <- diamonds[sample(nrow(diamonds), 500),]
paste(
sep = '\n',
plotToScript('vis', qplot(Response, Freq, data=csat[csat$citystate=="St. Paul, MN",]))
)
}
runServer('0.0.0.0', 8101, app)
gigvis
set_last_vis
help(set_last_lis)
help(set_last_vis)
reactive
invalidateLater
gigvis(mtc1, props(x ~ wt, y ~ mpg),
mark_symbol(),
dynamic = TRUE
)
gigvis(csat[csat$citystate=="St. Paul, MN",],
props = props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE))
)
mtc1 <- reactive({
invalidateLater(2000, NULL);
csat[csat$citystate==levels(csat$citystate)[sample(26, 1)],]
})
gigvis(mtc1, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
i <- 1
mtc1 <- reactive({
invalidateLater(2000, NULL);
csat[csat$citystate==levels(csat$citystate)[i],];
i <- i + 1
})
gigvis(mtc1, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
mtc1 <- reactive({
invalidateLater(2000, NULL);
csat[csat$citystate==levels(csat$citystate)[i],]
i <- i + 1
})
gigvis(mtc1, props(x ~ Response, y ~ Freq, fill ~ Response),
mark_rect(props(y2 = constant(0, scale = TRUE), width = band())),
scales = scales(scale_ordinal("x", range = "width", padding = 0, points = FALSE)),
dynamic = TRUE
)
remove(sotc10)
