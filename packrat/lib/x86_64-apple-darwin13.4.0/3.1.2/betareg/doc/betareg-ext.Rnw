\documentclass[nojss]{jss}
\usepackage{amsmath,amssymb,amsfonts,thumbpdf, natbib}

%% additional commands
\newcommand{\squote}[1]{`{#1}'}
\newcommand{\dquote}[1]{``{#1}''}
\newcommand{\fct}[1]{{\texttt{#1()}\index{#1@\texttt{#1()}}}}
\newcommand{\class}[1]{\dquote{\texttt{#1}}}
%% for internal use
\newcommand{\fixme}[1]{\emph{\marginpar{FIXME} (#1)}}
\newcommand{\readme}[1]{\emph{\marginpar{README} (#1)}}
\newcommand*{\hder}[2]{\partial{#1}/\partial{#2} }
\newcommand*{\hderstraight}[2]{\partial{#1}/\partial{#2} }
\newcommand{\diag}{\mathop{\rm diag}}
\newcommand{\trace}{\mathop{\rm tr}}
\newcommand{\topd}{{\rm D}}

\author{Bettina Gr\"un\\Johannes Kepler\\Universit\"at Linz
   \And Ioannis Kosmidis\\University College London
   \And Achim Zeileis\\Universit\"at Innsbruck}
\Plainauthor{Bettina Gr\"un, Ioannis Kosmidis, Achim Zeileis}

\title{Extended Beta Regression in \proglang{R}: Shaken, Stirred, Mixed, and Partitioned}
\Plaintitle{Extended Beta Regression in R: Shaken, Stirred, Mixed, and Partitioned}

\Keywords{beta regression, bias correction, bias reduction, recursive partitioning, finite mixture, \proglang{R}}
\Plainkeywords{beta regression, bias correction, bias reduction, recursive partitioning, finite mixture, R}

\Abstract{
  This introduction to the extended features of the \proglang{R} package
  \pkg{betareg} is a (slightly) modified version of \cite{betareg:Gruen+Kosmidis+Zeileis:2012},
  published in the \emph{Journal of Statistical Software}.

  Beta regression -- an increasingly popular approach for
  modeling rates and proportions -- is extended in various directions:
  (a)~bias correction/reduction of the maximum likelihood estimator,
  (b)~beta regression tree models by means of recursive partitioning,
  (c)~latent class beta regression by means of finite mixture
  models. All three extensions may be of importance for enhancing the
  beta regression toolbox in practice to provide more reliable
  inference and capture both observed and unobserved/latent
  heterogeneity in the data. Using the analogy of
  \cite{betareg:Smithson+Verkuilen:2006}, these extensions make beta
  regression not only ``a better lemon squeezer'' (compared to
  classical least squares regression) but a full-fledged modern juicer
  offering lemon-based drinks: shaken and stirred (bias correction and
  reduction), mixed (finite mixture model), or partitioned (tree
  model). All three extensions are provided in the \proglang{R}
  package \pkg{betareg} (at least 2.4-0), building on generic
  algorithms and implementations for bias correction/reduction,
  model-based recursive partioning, and finite mixture models,
  respectively. Specifically, the new functions \fct{betatree} and
  \fct{betamix} reuse the object-oriented flexible implementation from
  the \proglang{R} packages \pkg{party} and \pkg{flexmix}, respectively.
}

\Address{
  Bettina Gr\"un\\
  Institut f\"ur Angewandte Statistik\\
  Johannes Kepler Universit{\"at} Linz\\
  Altenbergerstra{\ss }e 69\\
  4040 Linz, Austria\\
  E-mail: \email{Bettina.Gruen@jku.at}\\
  URL: \url{http://ifas.jku.at/gruen/}\\

  Ioannis Kosmidis\\
  Department of Statistical Science\\
  University College London\\
  Gower Street\\
  London WC1E 6BT, United Kingdom\\
  E-mail: \email{ioannis@stats.ucl.ac.uk}\\
  URL: \url{http://www.ucl.ac.uk/~ucakiko/}\\

  Achim Zeileis\\
  Department of Statistics\\
  Universit\"at Innsbruck\\
  Universit\"atsstr.~15\\
  6020 Innsbruck, Austria\\
  E-mail: \email{Achim.Zeileis@R-project.org}\\
  URL: \url{http://eeecon.uibk.ac.at/~zeileis/}
}

%% Sweave/vignette information and metadata
%% need no \usepackage{Sweave}
\SweaveOpts{engine = R, eps = FALSE, keep.source = TRUE}
%\VignetteIndexEntry{Extended Beta Regression in R: Shaken, Stirred, Mixed, and Partitioned}
%\VignetteDepends{stats,betareg,party,flexmix}
%\VignetteKeywords{beta regression, bias correction, bias reduction, recursive partitioning, finite mixture, R}
%\VignettePackage{betareg}

<<preliminaries, echo=FALSE, results=hide>>=
options(width = 70, prompt = "R> ", continue = "+  ", useFancyQuotes = FALSE)
library("betareg")
combine <- function(x, sep, width) {
  cs <- cumsum(nchar(x))
  remaining <- if (any(cs[-1] > width)) combine(x[c(FALSE, cs[-1] > width)], sep, width)
  c(paste(x[c(TRUE, cs[-1] <= width)], collapse= sep), remaining)
}
prettyPrint <- function(x, sep = " ", linebreak = "\n\t", width = getOption("width")) {
  x <- strsplit(x, sep)[[1]]
  paste(combine(x, sep, width), collapse = paste(sep, linebreak, collapse = ""))
}
cache <- FALSE
enumerate <- function(x) paste(paste(x[-length(x)], collapse = ", "), x[length(x)], sep = " and ")
betamix_methods <-
  enumerate(paste("\\\\fct{", gsub("\\.betamix", "", as.character(methods(class = "betamix"))), "}", sep = ""))
@
\begin{document}

\section{Introduction}\label{sec:intro}

\subsubsection*{A brief review of beta regression}

Beta regression is a model for continuous response variables $y$ which
assume values in the open unit interval $(0, 1)$. Such response
variables may stem from rates, proportions, concentrations, etc. A
regression model where the mean as well as the precision is modeled
through covariates was introduced by
\cite{betareg:Ferrari+Cribari-Neto:2004} along with the extensions by
\cite{betareg:Smithson+Verkuilen:2006} and
\cite{betareg:Simas+Barreto-Souza+Rocha:2010}. This model is also
referred to as ``double index regression model'' because it
contains two regression parts: one for the mean and one for the
precision.  \cite{betareg:Ferrari+Cribari-Neto:2004} employed an
alternative parameterization of the beta distribution characterizing
more easily the mean and the variance.  In this parameterization the
beta distribution has the density
%
\begin{equation} \label{eq:density}
f(y;\mu,\phi) =
\frac{\Gamma(\phi)}{\Gamma(\mu\phi)\Gamma((1-\mu)\phi)}y^{\mu\phi-1}(1-y)^{(1-\mu)\phi-1}\,
,\quad 0<y<1\, ,\quad  0<\mu<1\, , \quad \phi > 0 \, ,
\end{equation}
%
where $\Gamma(\cdot)$ is the gamma function.  A
beta-distributed variable $Y$ then has mean $\E(Y) = \mu$ and
variance $\VAR(Y) = \mu(1-\mu)/(1+\phi)$ so that $\phi$ can be seen as a
precision parameter.

The double index beta regression model is specified in the following
way. Given observations on $n$ independent beta-distributed
random variables $Y_i$ ($i = 1, \dots, n$), the corresponding parameters
$\mu_i$ and $\phi_i$ are linked to linear predictors $\eta_i$ and $\zeta_i$
as follows
\begin{align}
  g_1(\mu_i) & = \eta_i =   x_i^\top \beta \, , \label{eq:link1}  \\
  g_2(\phi_i) & = \zeta_i =   z_i^\top \gamma\, , \label{eq:link2}
\end{align}
where $x_i$ and $z_i$ are $p$- and $q$-dimensional vectors of
covariates observed along with $Y_i$ $(i = 1, \ldots, n)$, and $\beta
= (\beta_1, \ldots, \beta_p)^\top$, $\gamma = (\gamma_1, \ldots,
\gamma_q)^\top$ are the vectors of coefficients associated with the
means and the precisions, respectively. The functions $g_1(\cdot)$ and
$g_2(\cdot)$ are monotonic link functions, preferably with the
property of mapping the range of $\mu_i$ $(0, 1)$ and $\phi_i$ $(0,
\infty)$, respectively, to the real line.  Suitable candidates for
$g_1(\cdot)$ are the logit, probit and generally any inverse of a
cumulative distribution function, and for $g_2(\cdot)$ the log
function. Another common choice for $g_2(\cdot)$ is the identity
function which, however, can lead to invalid results when some
$\zeta_i < 0$.

Typically, the coefficients $\beta$ and $\gamma$ are estimated by maximum
likelihood (ML) and inference is based on the usual central limit theorem
with its associated asymptotic tests, e.g., likelihood ratio, Wald, score/Lagrange
multiplier (LM).

\subsubsection*{Implementation in \proglang{R}}

The \proglang{R} package \pkg{betareg}
\citep{betareg:Cribari-Neto+Zeileis:2010} provides ML estimation of
beta regressions in its main model fitting function \fct{betareg}. The
interface as well as the fitted model objects are designed to be
similar to those from \fct{glm}. The model specification is via a
\code{formula} plus \code{data}. Because two types of covariates need
to be distinguished a two-part formula is allowed based on
functionality provided by the \pkg{Formula} package
\citep[][]{betareg:Zeileis+Croissant:2010}. For example, \code{y ~ x1
  + x2 + x3 | z1 + z2} would assign the covariates \code{x1},
\code{x2}, and \code{x3} to the mean submodel~\eqref{eq:link1}
and \code{z1} and \code{z2} to the precision
submodel~\eqref{eq:link2}, respectively.  Function \fct{betareg}
internally uses function \fct{optim} as a general purpose optimizer to
maximize the log-likelihood. The fitted model has methods for several
extractor functions, e.g., \fct{coef}, \fct{vcov}, \fct{residuals},
\fct{logLik}. Base methods for the returned fitted model are
\fct{summary}, \fct{AIC}, \fct{confint}. Further methods are available
for functions from \pkg{lmtest} \citep{betareg:Zeileis+Hothorn:2002}
and \pkg{car} \citep{betareg:Fox+Weisberg:2011}, e.g., \fct{lrtest},
\fct{waldtest}, \fct{coeftest}, and \fct{linearHypothesis}. Multiple
testing is possible via package \pkg{multcomp}
\citep{betareg:Hothorn+Bretz+Westfall:2008} and structural change
tests can be performed using package \pkg{strucchange}
\citep{betareg:Zeileis+Leisch+Hornik:2002}.

\subsubsection*{Extensions}

Although the \pkg{betareg} package as published by
\cite{betareg:Cribari-Neto+Zeileis:2010} provides a rather complete
beta regression toolbox based on classical ML inference, further
techniques may be required in practice. First, it has been shown that
ML inference may be severely biased in the context of beta regression
\citep{betareg:Kosmidis+Firth:2010}, possibly leading to overly
optimistic inferences in the sense of underestimating the standard
errors of the estimators. Second, it is not always easy to capture all
heterogeneity in the data through the two linear predictors,
especially when there are latent unobserved groups/clusters of
observations.

To address the first issue of potentially biased inference, the
results of \cite{betareg:Kosmidis+Firth:2010} are extended to the case
with mean and precision covariates and the corresponding methods are
implemented in the \fct{betareg} function starting from version 2.4-0
of \pkg{betareg}.  The software optionally allows for bias-corrected
or bias-reduced estimation by adopting the unifying iteration
developed in \cite{betareg:Kosmidis+Firth:2010}.

To address the second issue of heterogeneity between groups/clusters
of observations, two generic strategies, model-based recursive
partitioning \citep{betareg:Zeileis+Hothorn+Hornik:2008} and finite
mixture models \citep[see e.g.,][]{betareg:McLachlan+Peel:2000,
  betareg:Fruehwirth-Schnatter:2006}, are applied to beta
regressions. The idea for both techniques is to capture situations in
which the regression relationships vary across groups in the
population. If one can identify variables which are related to such
groups, one may be able to include them directly in the regression
relationships. However, (a)~this may lead to rather complex and hard
to interpret models, and (b)~unnecessary complexity is introduced if
the differences are only present in a subset of the combined groups
induced by several variables.  Model-based recursive partitioning
avoids such drawbacks. Furthermore, if groups cannot be directly
related to observed variables, the heterogeneity can be accounted for
by using finite mixture models. Therefore, extensions of the
\pkg{betareg} package are introduced where model heterogeneity is
taken into account when covariates that characterize the groups are
available, and when the heterogeneity is due to latent variables. The
new function \fct{betatree} provides model-based recursive
partitioning of beta regressions leveraging tools from the \pkg{party}
package \citep{betareg:Hothorn+Hornik+Strobl:2011}, and the function
\fct{betamix} provides beta regression mixture models (or latent class
beta regression) reusing the generic functionality from the
\pkg{flexmix} package \citep{betareg:Leisch+Gruen:2012}.


\section{Bias correction and reduction in beta regressions} \label{sec:bias}

\subsection{Preamble}

\cite{betareg:Kosmidis+Firth:2010} show that bias correction (BC) or
bias reduction (BR) of the ML estimator in parametric models may be
achieved via a unifying \emph{quasi} Fisher scoring algorithm. They
illustrate the applicability of their algorithm in a beta regression
setting with a common precision parameter $\phi$ for all subjects,
also revealing some errors in previous literature for the reduction of
bias in beta regression models -- specifically mistakes in
\cite{betareg:Ospina+Cribari-Neto+Vasconcellos:2006} and
\cite{betareg:Simas+Barreto-Souza+Rocha:2010} --- that led to
misleading negative conclusions about the effect of BC/BR on
inferences for beta regression models. In
\cite{betareg:Kosmidis+Firth:2010}, it is shown that BC/BR for beta
regression models can be desirable because the ML estimator of $\phi$
may demonstrate substantial upward bias, which in turn may lead to
underestimation of asymptotic standard errors and hence
over-optimistic Wald-type inferences (e.g., confidence intervals with
coverage far below the nominal levels).

The results in \cite{betareg:Kosmidis+Firth:2010} are extended here to
cover not only the case of constant $\phi$ but also a regression part
for the precision parameters as shown in Equation~\ref{eq:link2}.

\subsection{Generic framework} \label{sub:iteration}

Denote by $0_{k}$ a vector of $k$ zeros and by $S(\theta)$ the vector
of the log-likelihood derivatives for a parametric model with
parameter $\theta$. \cite{betareg:Firth:1993} showed that the solution
$\tilde\theta$ of the equation
\begin{equation}
  \label{eq:adjest}
S(\tilde{\theta}) + A(\tilde{\theta}) = 0_{p+q} \, ,
\end{equation}
has smaller asymptotic bias than the ML estimator, if
the $t$-th component of the vector $A(\theta)$ has the form
\[
A_t(\theta) = \frac{1}{2}\trace\left[\{F(\theta)\}^{-1} \left\{
    P_t(\theta) + Q_t(\theta) \right\}\right] \quad (t = 1, \ldots,
p + q) \, ,
\]
with $F(\theta)$ the expected information matrix and
\begin{align}
  P_t(\theta) & =  \E\{S(\theta)S^\top(\theta)S_t(\theta)\}
  \quad (t = 1, \ldots, p + q)\, , \label{eq:P} \\
  Q_t(\theta) & = -\E\left\{I(\theta)S_t(\theta) \right\} \quad (t =
  1, \ldots, p + q)\, , \label{eq:Q}
\end{align}
where $S_t(\theta)$ denotes the $t$-th component of $S(\theta)$ $(t =
1, \ldots, p + q)$ and $I(\theta)$ is the observed information matrix
(minus the matrix of second derivatives of the log-likelihood with
respect to $\theta$).

The quasi Fisher scoring iteration that has been developed in
\cite{betareg:Kosmidis+Firth:2010} attempts to solve
Equation~\ref{eq:adjest}. Specifically, at the $j$-th step of the iterative
procedure, the current value $\theta^{(j)}$ of the parameter vector is
updated to $\theta^{(j+1)}$ by
\begin{equation}
  \label{eq:iteration}
\theta^{(j+1)} = \theta^{(j)} + \left\{F\left(\theta^{(j)}\right)\right\}^{-1}
S\left(\theta^{(j)}\right) - b\left(\theta^{(j)}\right) \, ,
\end{equation}
where $b(\theta) = - \{F(\theta)\}^{-1} A(\theta)$ is the vector of
the first term in the expansion of the bias of the ML estimator.

If the summand $b\left(\theta^{(j)}\right)$ is ignored, then iteration
\eqref{eq:iteration} becomes the usual Fisher scoring iteration that
can be used to solve the ML score equations $S(\hat\theta) = 0_{p+q}$.

Furthermore, if the starting value $\theta^{(0)}$ is the ML
estimator $\hat\theta$, then $\theta^{(1)}$ is the
bias-corrected estimator $\theta^\dagger$ of $\theta$ defined as
\[
\theta^\dagger = \hat\theta - b(\hat\theta) \, ,
\]
which also has smaller asymptotic bias compared to the ML
estimator \citep{betareg:Efron:1975}.

Hence, the quasi Fisher scoring iteration provides a unified framework
for implementing all three types of estimators -- ML, BR, and BC -- by
merely deciding whether the summand $b\left(\theta^{(j)}\right)$ is
absent or present in the right hand side of \eqref{eq:iteration}, and
whether more than one iteration should be allowed in the latter case.


\subsection{Bias correction and bias reduction for beta regressions}

Denote the vector of the $p + q$ model parameters in a beta regression
model by $\theta = (\beta^\top, \gamma^\top)^\top$, and let $X$ and
$Z$ be the $n\times p$ and $n\times q$ model matrices with $i$-th row
$x_i$ and $z_i$, respectively $(i = 1, \ldots, n)$.  The ingredients
required for setting the iteration described in
Section~\ref{sub:iteration} are closed-form expressions for the vector
of log-likelihood derivatives $S(\theta)$, the expected information
matrix $F(\theta)$ and the two higher-order joint null cumulants of
log-likelihood derivatives $P_t(\theta)$ and $Q_t(\theta)$ shown in
\eqref{eq:P} and \eqref{eq:Q}. Based on these, all matrix
multiplications and inversions can be performed numerically during the
iterative procedure.

The fact that all the aforementioned quantities depend on $X$ and $Z$,
and that $S(\theta)$ and $I(\theta)$ depend additionally on the random
variables $Y_i$ $(i = 1, \ldots, n)$ has been concealed here merely
for notational simplicity.  The same convention is used for the
derivations below, additionally concealing the dependence on $\theta$
unless otherwise stated.

Up to an additive constant the log-likelihood for the beta regression model in \eqref{eq:density}
is $\ell(\theta) = \sum_{i =1}^n \ell_i(\theta)$ with
\begin{equation}
\label{eq:loglik}
\ell_i(\theta) = \phi_i\mu_i
  (T_i - U_i) + \phi_i U_i +
  \log\Gamma(\phi_i) -
  \log\Gamma(\phi_i\mu_i) -\log\Gamma(\phi_i(1-\mu_i))
\end{equation}
where $\mu_i$ and $\phi_i$ are defined by inverting \eqref{eq:link1}
and \eqref{eq:link2}, respectively, and where $T_i = \log Y_i$ and
$U_i = \log(1 - Y_i)$ are the sufficient statistics for the beta
distribution with natural parameters $\phi_i\mu_i$ and $\phi_i(1 -
\mu_i)$ $(i =1, \ldots, n)$, respectively.

Direct differentiation of the log-likelihood function reveals that the
vector of log-likelihood derivatives has the form
\begin{equation}
  \label{eq:scores}
S(\theta) = \nabla_\theta \ell(\theta) = \left[
\begin{array}{c}
  X^\top \Phi D_1 \left(\bar{T} - \bar{U}\right) \\
  Z^\top D_2 \left\{ M\left(\bar{T} - \bar{U}\right) + \bar{U}  \right\}
\end{array}
\right]\, ,
\end{equation}
with $\Phi = \diag\{\phi_1, \ldots, \phi_n\}$, $M
= \diag\{\mu_1, \ldots, \mu_n\}$, $D_1 = \diag\{d_{1,1}, \ldots, d_{1,
  n}\}$, and $D_2 = \diag\{d_{2,1}, \ldots, d_{2, n}\}$, where $d_{1,
  i} = \hderstraight{\mu_i}{\eta_i}$ and $d_{2,i} =
\hderstraight{\phi_i}{\zeta_i}$. Furthermore,
$\bar{T} = (\bar{T}_1, \ldots, \bar{T}_n)^\top$ and $\bar{U} =
(\bar{U}_1, \ldots, \bar{U}_n)^\top$ are the vectors of centered
sufficient statistics, with
\begin{align*}
\bar{T}_i & = T_i - \E(T_i) \, , \\
\bar{U}_i & = U_i - \E(U_i) \, ,
\end{align*}
where $\E(T_i) = \psi^{(0)}(\phi\mu_i) - \psi^{(0)}(\phi_i)$ and
$\E(U_i) = \psi^{(0)}(\phi(1-\mu_i)) + \psi^{(0)}(\phi_i)$, with
$\psi^{(r)}(k) = \hderstraight{^{r+1} \log\Gamma(k)}{k^{r+1}}$ the
polygamma function of degree $r$ $(r = 0, 1, \ldots; i =1, \ldots,
n)$.

Differentiating $\ell(\theta)$ one more time reveals that the observed
information on $\theta$ is
\begin{equation}
\label{eq:obsinfo}
I(\theta) = F(\theta) - \left[
\begin{array}{cc}
  X^\top \Phi D_1' \diag\{\bar{T} - \bar{U}\}X & X^\top D_1\diag\{\bar{T} - \bar{U}\}D_2Z \\
  Z^\top D_2\diag\{\bar{T} - \bar{U}\}D_1X & Z^\top D_2'\left(M\diag\left\{\bar{T} -
      \bar{U}\} + \diag\{\bar{U}\right\}\right)Z \\
\end{array}
\right] \, ,
\end{equation}
where
\begin{equation}
\label{eq:expinfo}
F(\theta) = \left[
\begin{array}{cc}
  X^\top D_1\Phi K_2 \Phi D_1 X & X^\top D_1\Phi \left(MK_2 - \Psi_1\right)D_2Z \\
  Z^\top D_2 \left(MK_2 - \Psi_1\right)\Phi D_1  X &
  Z^\top D_2\left\{M^2K_2 + (1_n-2M)\Psi_1 - \Omega_1\right\}D_2Z
\end{array}
\right]\, ,
\end{equation}
is the expected information on $\theta$, because the second summand in
the right hand side of \eqref{eq:obsinfo} depends linearly on the
centered sufficient statistics and hence has expectation zero. Here,
$1_n$ is the $n \times n$ identity matrix, $D_1' = \diag\{d'_{1,1},
\ldots, d'_{1,n}\}$ with $d'_{1,i} = \hderstraight{^2\mu_i}{\eta_i^2}$
and $D_2' = \diag\{d'_{2,1}, \ldots, d'_{2,n}\}$ with $d'_{2,i} =
\hderstraight{^2\phi_i}{\zeta_i^2}$ $(i = 1, \ldots, n)$. Furthermore,
$K_2 = \diag\{\kappa_{2,1}, \ldots, \kappa_{2,n}\}$, where
$\kappa_{2,i} = \VAR\left(\bar{T}_i -\bar{U}_i\right) =
\psi^{(1)}(\phi_i\mu_i) + \psi^{(1)}(\phi_i(1-\mu_i))$ for $i =1,
\ldots, n$ and
\begin{align*}
  \Psi_r & = \diag\left\{\psi^{(r)}(\phi_1(1-\mu_1)), \ldots,
  \psi^{(r)}(\phi_n(1-\mu_n))\right\} \, ,\\
  \Omega_r & = \diag\left\{\psi^{(r)}(\phi_1), \ldots,
  \psi^{(r)}(\phi_n)\right\}\quad (r = 0, 1, \ldots)\, .
\end{align*}

Some tedious but straightforward algebra, along with direct use of the
results in \cite{betareg:Kosmidis+Firth:2010} for the joint cumulants
of $\bar{T}_i$ and $\bar{U}_i$ $(i = 1, \ldots, n)$, gives
\begin{equation}
  \label{eq:PQbeta}
  P_t(\theta) + Q_t(\theta) = \left[
    \begin{array}{cc}
      V_{\beta\beta, t} & V_{\beta\gamma, t} \\
      V_{\beta\gamma, t}^\top & V_{\gamma\gamma, t}
    \end{array}
  \right] \quad (t = 1, \ldots, p)\, ,
\end{equation}
\begin{equation}
  \label{eq:PQgamma}
  P_{p + s}(\theta) + Q_{p + s}(\theta)  = \left[
    \begin{array}{cc}
      W_{\beta\beta, s} & W_{\beta\gamma, s} \\
      W_{\beta\gamma, s}^\top & W_{\gamma\gamma, s}
    \end{array}
  \right] \quad (s = 1, \ldots, q) \, ,
\end{equation}
where
\begin{align*}
  V_{\beta\beta, t} & = X^\top \Phi^2 D_1 \left( \Phi D_1^2 K_3 + D_1'
    K_2 \right)X_t^\topd X \, , \\
  V_{\beta\gamma, t} & = X^\top\Phi D_1^2 D_2 \left\{\Phi\left(MK_3 + \Psi_2\right) +
  K_2\right)X_t^\topd Z \, , \\
  V_{\gamma\gamma, t} & =
  Z^\top\Phi D_1 \left\{ D_2^2\left(M^2 K_3 + 2M\Psi_2 -
      \Psi_2\right) + D_2'\left(MK_2 - \Psi_1\right)\right\}X_t^\topd Z
\end{align*}
and
\begin{align*}
  W_{\beta\beta, s} & =
  X^\top \Phi D_2 \left\{\Phi D_1^2 \left(M K_3 + \Psi_2\right) +
    D_1'\left(MK_2 - \Psi_1\right) \right\}Z_s^\topd X\, , \\
  W_{\beta\gamma, s} & = X^\top D_1 D_2^2 \left\{ \Phi \left(M^2 K_3 + 2M\Psi_2
      - \Psi_2\right) + MK_2 - \Psi_1 \right\}Z_s^\topd Z\, , \\
  W_{\gamma\gamma, s} & =
  Z^\top D_2^3 \left\{M^3K_3 + \left( 3M^2 - 3M + 1_n \right) \Psi_2 -
  \Omega_2 \right\} Z_s^\topd Z  \\
& \qquad + Z^\top D_2 D_2' \left\{M^2K_2 + \Psi_1 - 2M \Psi_1 -
  \Omega_1 \right\}Z_s^\topd Z\, ,
\end{align*}
where $K_3 = \diag\left\{\kappa_{3,1}, \ldots, \kappa_{3,n} \right\}$,
with $\kappa_{3,i} = \E\left\{\left(\bar{T}_i -
    \bar{U}_i\right)^3\right\} = \psi^{(2)}(\phi_i\mu_i) -
\psi^{(2)}(\phi_i(1 - \mu_i))$ $(i =1, \ldots, n)$. Furthermore,
$C_t^\topd$ denotes the diagonal matrix with non-zero components the
elements of the $t$-th column of a matrix $C$.

\subsection[Implementation in betareg]{Implementation in \pkg{betareg}}

Support for both bias correction and bias reduction has been added
in the principal model fitting function \fct{betareg} starting from
\pkg{betareg}~2.4-0. The interface of \fct{betareg} is essentially the
same as described in \cite{betareg:Cribari-Neto+Zeileis:2010}, with
merely the addition of a \code{type} argument that specifies the type
of estimator that should be used.
%
\begin{Code}
  betareg(formula, data, subset, na.action, weights, offset,
    link = "logit", link.phi = NULL, type = c("ML", "BC", "BR"),
    control = betareg.control(...), model = TRUE, y = TRUE, x = FALSE, ...)
\end{Code}
%
The arguments in the first line (\code{formula}, \code{data}, \dots)
pertain to the data and model specification using a formula that
potentially may have two parts pertaining to the mean and the
precision submodels, respectively.  The arguments \code{link} and
\code{link.phi} specify the link functions $g_1(\cdot)$ and
$g_2(\cdot)$, respectively. The argument \code{type} controls which of
the maximum likelihood (\code{type = "ML"}), bias-corrected
(\code{type = "BC"}), or bias-reduced (\code{type = "BR"}) estimates
are computed.  Finally, \code{control} is a list of control arguments
and \code{model}, \code{y}, and \code{x} control whether the
respective data components are included in the fitted model
object. For more details on all arguments except \code{type} see
\cite{betareg:Cribari-Neto+Zeileis:2010}.

While the interface of \fct{betareg} is almost the same as in previous
versions, the internal code has been substantially
enhanced. Specifically, the optimization via \fct{optim} is now
(optionally) enhanced by an additional Fisher scoring iteration. As in
previous versions, the initial optimization of the likelihood is
carried out via \fct{optim}, by default with \code{method = "BFGS"},
using analytic gradients. In recent versions, this is followed by a
Fisher scoring iteration with both analytic gradients and expected
information that either neglects or includes the summand
$b\left(\theta^{(j)}\right)$ in iteration \eqref{eq:iteration}.  Thus,
the iteration is either used to further improve the numerical
maximization of the likelihood (for \code{type = "ML"} or \code{type =
  "BC"}) or to carry out the bias reduction (for \code{type = "BR"})
as detailed in Section~\ref{sub:iteration}. To control the details of
the (quasi) Fisher scoring, \fct{betareg.control} takes two additional
arguments \code{fsmaxit = 200} and \code{fstol = 1e-8} controlling the
maximal number of iterations and convergence tolerance, respectively.
If the number of iterations is set to zero (\code{fsmaxit = 0}), no
Fisher scoring is carried out (allowed only for \code{type = "ML"} and
\code{"BC"}) and thus results from previous versions of \pkg{betareg}
can be exactly replicated.


\section{Beta regression trees} \label{sec:tree}
\label{sec:trees}
Model-based recursive partitioning
\citep[MOB,][]{betareg:Zeileis+Hothorn+Hornik:2008} builds on the more
widely known method of classification and regression trees
\citep[CART, ][]{betareg:Breiman+Friedman+Olshen:1984}. As for CART,
the idea is to split the sample recursively with respect to available
variables (called \dquote{partitioning} variables in what follows) in
order to capture differences in the response variable. While CART
tries to capture differences in the distribution of the response
variable (in particular with respect to location) directly, the aim of
model-based recursive partitioning is more broadly to capture
differences in parameters describing the distribution of the response.
In particular, model-based recursive partitioning allows to
incorporate regressor variables in a parametric model for the response
variable.

Here, we adapt the general MOB framework to the model-based
partitioning of beta regressions, called \dquote{beta regression
  trees} for short.  The aim is to capture differences in the
distribution that are not yet adequately described by the regressor
variables through a forward search.  Basically, the approach proceeds
by (a)~fitting a beta regression model, (b)~assessing whether its
parameters are stable across all partitioning variables,
(c)~splitting the sample along the partitioning variable associated with
the highest parameter instability, (d)~repeating these steps until
some stopping criterion is met. Thus, interactions and nonlinearities
can be incorporated by locally maximizing the likelihood of a
partitioned model. More precisely and denoting $c_{ij}$ the $j$-th
partitioning variable ($j = 1, \dots, l$) for observation $i$, the
steps of the MOB algorithm adapted to beta regression are as follows.
%
\begin{enumerate}
  \item Fit a beta regression model with parameters $\beta$ and $\gamma$
        by maximizing the log-likelihood for all observations $y_i$ in the
	current sample.
  \item Assess whether the parameters $\beta$ and $\gamma$ are stable across
        each partitioning variable $c_{ij}$.
  \item If there is significant parameter instability with respect to
        at least one of the partitioning variables $c_{ij}$, split the
        sample along the variable $j*$ with the strongest association:
        Choose the breakpoint with highest improvement in the fitted
	log-likelihood.
  \item Repeat steps 1--3 recursively in the resulting subsamples
        until there is no significant instability any more or the
	sample size is too small.
\end{enumerate}

The MOB framework of \cite{betareg:Zeileis+Hothorn+Hornik:2008} is
generic in that it requires only the specification of a model with
additive objective function for which a central limit theorem
holds. Under the usual regularity conditions, the latter requirement
is valid for beta regressions. The main building blocks that the MOB
algorithm requires are the contributions to the additive objective
function (in steps 1 and 3) and to the associated score function (in
step 2). For beta regressions, the objective is the log-likelihood
$\ell(\theta)$ and its contributions $\ell_i(\theta)$ are given in
\eqref{eq:loglik}. By \eqref{eq:scores} and using the notation in
Section \ref{sec:bias}, the corresponding score (or gradient)
contributions have the form
\begin{equation}
  S_{i}(\theta) = \left[
    \begin{array}{c}
      \mu_i \phi_i d_{1,i} \left(\bar{T}_i -
  \bar{U}_i\right)x_{i1} \\
\vdots \\
      \mu_i \phi_i d_{1,i} \left(\bar{T}_i -
  \bar{U}_i\right)x_{ip} \vspace{1em} \\
d_{2,i}\left\{ \mu_i\left(\bar{T}_i -
  \bar{U}_i\right) + \bar{U}_i \right\}z_{i1} \\
\vdots \\
d_{2,i}\left\{ \mu_i\left(\bar{T}_i -
  \bar{U}_i\right) + \bar{U}_i \right\}z_{iq} \\
    \end{array}
    \right]\quad (i = 1, \ldots, n) \, .
  \end{equation}
  The above contributions are employed for testing whether there are
  significant departures from zero across the partitioning
  variables. More specifically, MOB uses generalized M-fluctuation
  tests for parameter instability
  \citep{betareg:Zeileis:2006,betareg:Zeileis+Hornik:2007}:
  fluctuations in numeric variables are assessed with a $\sup$LM type
  test \citep{betareg:Andrews:1993} and fluctuations in categorical
  variables are assessed with a $\chi^2$-type test
  \citep{betareg:Hjort+Koning:2002}. For further details and
  references, see
  \cite{betareg:Zeileis+Hothorn+Hornik:2008}\footnote{An example of
    M-fluctuation tests for parameter instability (also known as
    structural change) in beta regressions is also discussed in
    \cite{betareg:Zeileis:2006} and replicated in
    \cite{betareg:Cribari-Neto+Zeileis:2010}. However, this uses a
    double-maximum type test statistic, not a $\sup$LM or $\chi^2$
    statistic.}.

Beta regression trees are implemented in the \pkg{betareg} package in function
\fct{betatree} taking the following arguments:
%
\begin{Code}
  betatree(formula, partition, data, subset, na.action,
    link = "logit", link.phi = "log", control = betareg.control(), ...)
\end{Code}
%
Essentially, almost all arguments work as for the basic \fct{betareg} function.
The main difference is that a \code{partition} formula (without left hand side),
such as \code{~ c1 + c2 + c3} has to be provided to specify the vector of partitioning variables
$c_i = (c_{i1}, \dots, c_{il})^\top$.
As an alternative, \code{partition} may be omitted when \code{formula} has three parts
on the right hand side, such as \code{y ~ x1 + x2 | z1 | c1 + c2 + c3}, specifying
mean regressors $x_i$, presicion regressors $z_i$, and partitioning variables $c_i$,
respectively.

The \fct{betatree} function takes all arguments and carries out all
data preprocessing and then calls the function \fct{mob} from the
\pkg{party} package
\citep{betareg:Hothorn+Hornik+Zeileis:2006,betareg:Hothorn+Hornik+Strobl:2011}. The
latter can perform all steps of the MOB algorithm in an
object-oriented manner, provided that a suitable model fitting
function (optimizing the log-likelihood) is specified and that
extractor functions are available for the optimized log-likelihood
\eqref{eq:loglik} and the score function \eqref{eq:scores} at the
estimated parameters. For model fitting \fct{betareg.fit} is employed
(through a suitable convenience interface called \fct{betaReg}) and
for extractions the \fct{logLik} and \fct{estfun} methods \citep[see
also][]{betareg:Zeileis:2006a} are leveraged. To control the details
of the MOB algorithm -- such as the significance level and the minimal
subsample size in step~4 -- the \code{...} argument is passed to
\fct{mob}. (Note that this is somewhat different from \fct{betareg}
where \code{...} is passed to \fct{betareg.control}.)


\pagebreak

\section{Finite mixtures of beta regressions} \label{sec:mix}

Finite mixtures are suitable models if the data is assumed to be from
different groups, but the group memberships are not observed. If
mixture models are fitted one aims at determining the parameters of
each group as well as the group sizes. Furthermore, the model can be
used to estimate from which group each observation is. In the case of
finite mixtures of beta regression models the latent groups can be
assumed to differ in their mean and/or in their
precision. Furthermore, the group sizes can depend on further
covariates.

The mixture model with $K$ components which correspond to $K$
groups is given by
\begin{align}
  h(y ; x, z, c, \theta) & = \sum_{k = 1}^K \pi(k ; c, \alpha) f(y ;
  g_1^{-1}(x^{\top}\beta_k), g_2^{-1}(z^{\top}\gamma_k)),
\end{align}
where $h(\cdot ; \cdot)$ is the mixture density and $f(y ; \mu, \phi)$
is the density of the beta distribution using the mean-precision
parameterization shown in \eqref{eq:density}. Furthermore the
component weights $\pi(k ; \cdot)$ are nonnegative for all $k$ and sum
to one. In what follows the component weights are assumed to be
determined from a vector of covariates $c$ by
\begin{align}
  \pi(k ; c, \alpha) &= \frac{\textrm{exp}\{c^{\top}\alpha_k\}}
  {\sum_{u=1}^K\textrm{exp}\{c^{\top}\alpha_u\}}
\end{align}
with $\alpha_1 \equiv 0$. Without covariates and just a constant ($c = 1$),
this reduces to prior probabilities that are fixed across all observations.

\cite{betareg:Smithson+Segale:2009} and
\cite{betareg:Smithson+Merkle+Verkuilen:2011} consider finite mixtures
of beta regression models to analyze priming effects in judgments of
imprecise probabilities. \cite{betareg:Smithson+Segale:2009} fit
mixture models where they investigate if priming has an effect on the
size of the latent groups, i.e., they include the information on
priming as a predictor variable $c$.
\cite{betareg:Smithson+Merkle+Verkuilen:2011} assume that for at least
one component distribution the location parameter is a-priori known
due to so-called ``anchors''. For example, for partition priming, an
anchor would be assumed at location $1/K$ if the
respondents are primed to believe that there are $K$ possible
events. The component distribution for this anchor can be either
assumed to follow a beta distribution with known parameters for the
mean and the precision or a uniform distribution with known support.

Package \pkg{flexmix} \citep{betareg:Leisch:2004,
  betareg:Gruen+Leisch:2008} implements a general framework for
estimating finite mixture models using the EM algorithm. The EM
algorithm is an iterative method for ML estimation in a missing data
setting. The missing data for mixture models is the information to
which component an observation belongs. The EM algorithm exploits the
fact that the complete-data log-likelihood for the data and the
missing information is easier to maximize.  In general for mixture
models the posterior probabilities of an observation to be from each
component given the current parameter estimates are determined in the
E-step. The M-step then consists of maximizing the complete-data
log-likelihood where the missing component memberships are replaced by
the current posterior probabilities. This implies that different
mixture models only require the implementation of a suitable M-step
driver. Function \fct{betareg.fit} provides functionality for weighted
ML estimation of beta regression models and hence allows the easy
implementation of the M-step.

The function \fct{betamix} allows to fit finite mixtures of beta
regression models using the package \pkg{betareg}. It has the
following arguments:
%
\begin{Code}
betamix(formula, data, k, fixed, subset, na.action,
  link = "logit", link.phi = "log", control = betareg.control(...),
  FLXconcomitant = NULL, extra_components,
  verbose = FALSE, ID, nstart = 3, FLXcontrol = list(), cluster = NULL,
  which = "BIC", ...)
\end{Code}
%
\begin{itemize}
\item Arguments \code{formula}, \code{data}, \code{subset},
  \code{na.action}, \code{link}, \code{link.phi} and \code{control}
  are the same as for \fct{betareg}.
  
  Additionally the formula can also consist of three parts on the
  right hand side when specifying a concomitant variable model (see
  below for the \code{FLXconcomitant} argument).
  
\item Arguments \code{cluster}, \code{FLXconcomitant} and
  \code{FLXcontrol} are the same as for function \fct{flexmix}
  (in the latter two cases without prefix \code{FLX}).
  
  Currently functionality to fit a multinomal logit model for the
  concomitant variable model is provided by \code{FLXPmultinom()} with
  a formula interface for specifying the concomitant variables.  To
  fit a multinomial logit model for the variables \code{c1} and
  \code{c2} use \code{FLXconcomitant = FLXPmultinom(~ c1 +
    c2)}. Alternatively, yielding equivalent output, the main model
  formula can be specified via a three-part formula on the right hand
  side, e.g., \code{y ~ x | 1 | c1 + c2} (if there are no covariates
  for the precision model).
\item Argument
  \code{k}, \code{verbose}, \code{nstart} and \code{which} are used to
  specify the repeated runs of the EM algorithm using function
  \fct{stepFlexmix}, where \code{k} is the (vector of) number(s) of
  mixture components, \code{nstart} the number of random starting values
  used, and \code{which} determines which number of components is
  kept if \code{k} is a vector.
\item Because the formula for specifying the beta regression model is
  already a two-part formula, a potential grouping variable is specified via
  argument \code{ID} as opposed to when using \fct{flexmix}.
\item Further arguments for the component specific model are
  \code{fixed} and \code{extra_components}. The argument \code{fixed}
  can be used to specify the covariates for which parameters are the
  same over components. This is done via a formula interface. The
  argument \code{extra_components} is a list of
  \code{"extraComponent"} objects which specify the distribution of
  the component that needs to be completely specified (via the
  \code{type} argument). The parameter values of that distribution are
  specified through \code{coef} and \code{delta}.
\begin{verbatim}
<<results=tex, echo=false>>=
cat(prettyPrint(prompt(extraComponent, filename = NA)$usage[[2]], sep = ", ",
  linebreak = paste("\n", paste(rep(" ", 2), collapse = ""), sep= ""),
  width = 60))
@
\end{verbatim}
\end{itemize}

\section{Illustrative application}\label{sec:illustr-appl}

<<echo=FALSE, results=hide>>=
data("ReadingSkills", package = "betareg")
mean_accuracy <-
  format(round(with(ReadingSkills, tapply(accuracy, dyslexia, mean)), digits = 3),
         nsmall = 3)
mean_iq <-
  format(round(with(ReadingSkills, tapply(iq, dyslexia, mean)), digits = 3),
         nsmall = 3)
@

To illustrate the methods introduced above, we consider the analysis
of reading accuracy data for nondyslexic and dyslexic Australian
children \citep{betareg:Smithson+Verkuilen:2006}. The data consists of
\Sexpr{nrow(ReadingSkills)} observations of children with ages between
eight years and five months and twelve years and three months. For
each child, the variables \code{accuracy} (the score on a
reading accuracy test), \code{iq} (the score on a nonverbal intelligent
quotient test, converted to $z$ score), and a binary variable on
whether the child is dyslexic were recorded.
The \Sexpr{table(ReadingSkills$dyslexia)["yes"]}~dyslexic children
have a mean reading accuracy of~\Sexpr{mean_accuracy["yes"]} and a
mean IQ score of~$\Sexpr{mean_iq["yes"]}$. The
\Sexpr{table(ReadingSkills$dyslexia)["no"]}~nondyslexic children have
a mean reading accuracy of~\Sexpr{mean_accuracy["no"]} and a mean IQ
score of~$\Sexpr{mean_iq["no"]}$.

\cite{betareg:Smithson+Verkuilen:2006} investigated whether dyslexic
children have a different score on the reading accuracy test when
corrected for IQ score. \cite{betareg:Smithson+Verkuilen:2006} fit a
beta regression where the means are linked via the logistic link to
main and interaction effects for \code{iq} and \code{dyslexic}, and
where the precision parameters are linked with a log-link to main
effects for the same variables.  The fitted model and its comparison
to the results of an OLS regression using the logit-transformed
\code{accuracy} as response are given in
\cite{betareg:Cribari-Neto+Zeileis:2010}. Figure~\ref{fig:ReadingSkills},
shows a visualization of the fitted models to briefly highlight the
most important findings: In the control group (nondyslexic children),
reading skill increases clearly with the IQ score while the variance
decreases.  In the dyslexic group, reading skills are generally lower
and almost unaffected by IQ score.

\begin{figure}[t!]
\centering
\setkeys{Gin}{width=0.73\textwidth}
<<ReadingSkills, echo=FALSE, fig=TRUE, width=6, height=5.5>>=
data("ReadingSkills", package = "betareg")
rs_ols <- lm(qlogis(accuracy) ~ dyslexia * iq, data = ReadingSkills)
rs_beta <- betareg(accuracy ~ dyslexia * iq | dyslexia + iq,
  data = ReadingSkills, hessian = TRUE)
cl1 <- hcl(c(260, 0), 90, 40)
cl2 <- hcl(c(260, 0), 10, 95)
plot(accuracy ~ iq, data = ReadingSkills, col = cl2[as.numeric(dyslexia)],
  main = "Reading skills data", xlab = "IQ score", ylab = "Reading accuracy",
  pch = c(19, 17)[as.numeric(dyslexia)], cex = 1.5)
points(accuracy ~ iq, data = ReadingSkills, cex = 1.5,
  pch = (1:2)[as.numeric(dyslexia)], col = cl1[as.numeric(dyslexia)])
nd <- data.frame(dyslexia = "no", iq = -30:30/10)
lines(nd$iq, predict(rs_beta, nd), col = cl1[1], lwd = 2)
lines(nd$iq, plogis(predict(rs_ols, nd)), col = cl1[1], lty = 2, lwd = 2)
nd <- data.frame(dyslexia = "yes", iq = -30:30/10)
lines(nd$iq, predict(rs_beta, nd), col = cl1[2], lwd = 2)
lines(nd$iq, plogis(predict(rs_ols, nd)), col = cl1[2], lty = 2, lwd = 2)
legend("topleft", c("control", "dyslexic", "betareg", "lm"),
  lty = c(NA, NA, 1:2), pch = c(19, 17, NA, NA), lwd = 2,
  col = c(cl2, 1, 1), bty = "n")
legend("topleft", c("control", "dyslexic", "betareg", "lm"),
  lty = c(NA, NA, 1:2), pch = c(1, 2, NA, NA),
  col = c(cl1, NA, NA), bty = "n")
@
\caption{\label{fig:ReadingSkills} Reading skills data from \cite{betareg:Smithson+Verkuilen:2006}:
Linearly transformed reading accuracy by IQ score and dyslexia status (control, blue vs.\
dyslexic, red). Fitted curves correspond to beta regression (solid) and OLS
regression with logit-transformed dependent variable (dashed).}
\end{figure}

In what follows, the data is reanalyzed using the methods from
Sections~\ref{sec:bias}--\ref{sec:mix}.  Initially, the effect of bias
to ML inference is assessed. Subsequently, it is illustrated how the
differences with respect to dyslexia could have been discovered in a
data-driven way. While in the original study dyslexia has, of course,
been of prime interest in the model, the data set is used here to
illustrate how (a)~the two dyslexia groups are automatically selected
by recursive partitioning if dyslexia is just one of many
covariables and how (b)~mixture modeling recovers the dyslexia groups
if that covariable is not available at all.


\subsection{Bias correction and reduction}

To investigate whether the results of
\cite{betareg:Smithson+Verkuilen:2006} may have been affected by
severe bias in the ML estimator, all three flavors of estimators are
obtained and compared for the model with interactions (both in the mean and
precision submodels).

<<ReadingSkills-bias>>=
data("ReadingSkills", package = "betareg")
rs_f <- accuracy ~ dyslexia * iq | dyslexia * iq
rs_ml <- betareg(rs_f, data = ReadingSkills, type = "ML")
rs_bc <- betareg(rs_f, data = ReadingSkills, type = "BC")
rs_br <- betareg(rs_f, data = ReadingSkills, type = "BR")
@


\begin{table}[t!]
\centering
\begin{tabular}{llrrr}
\hline
 & & Maximum likelihood & Bias correction & Bias reduction \\ \hline
<<ReadingSkills-bias-table, echo=FALSE, results=tex>>=
rs_list <- list(rs_ml, rs_bc, rs_br)
cf <- paste("$", format(round(sapply(rs_list, coef), digits = 3), nsmall = 3), "$\\phantom{)}", sep = "")
se <- paste("(", format(round(sapply(rs_list, function(x) sqrt(diag(vcov(x)))), digits = 3), nsmall = 3), ")", sep = "")
ll <- paste("$", format(round(sapply(rs_list, logLik), digits = 3), nsmall = 3), "$\\phantom{)}", sep = "")
cfse <- matrix(as.vector(rbind(cf, se)), ncol = 3)
cfse <- cbind(
  c("Mean", rep("", 7), "Precision", rep("", 7)),
  rep(as.vector(rbind(c("(Intercept)", "\\code{dyslexia}", "\\code{iq}", "\\code{dyslexia:iq}"), "")), 2),
  cfse[, 1:2],
  paste(cfse[,3],
    c(rep("\\\\", 7), "\\\\ \\hline", rep("\\\\", 7), "\\\\ \\hline")))
cfse <- rbind(cfse, c("Log-likelihood", "", ll[1:2], paste(ll[3], "\\\\ \\hline")))
writeLines(apply(cfse, 1, paste, collapse = " & "))
@

\end{tabular}
\caption{\label{tab:ReadingSkills-bias} Comparison of coefficients and
  standard errors (in parentheses) in the interaction model for reading
  skills. The ML estimator from \texttt{rs\_ml}, the BC estimator from
  \texttt{rs\_bc}, and the BR estimator from \texttt{rs\_br} all give
  very similar results for the mean submodel. In the precision
  submodel, main effects are slightly damped and the interaction
  effect is slightly amplified when using BC/BR.}
\end{table}


\begin{figure}[t!]
\centering
\setkeys{Gin}{width=0.98\textwidth}
<<ReadingSkills-phi-plot, fig=TRUE, height=6.5, width=6.5, echo=FALSE>>=
pr_phi <- sapply(list("Maximum likelihood" = rs_ml,
                      "Bias correction" = rs_bc,
                      "Bias reduction" = rs_br), predict, type = "precision")
pairs(log(pr_phi), panel = function(x, y, ...) {
  panel.smooth(x, y, ...)
  abline(0, 1, lty = 2)
  })
@
\caption{\label{fig:readingskillsbias} Scatterplots of the logarithm
  of the estimated precision parameters $\log(\phi_i)$ based on the
  maximum likelihood, bias-corrected and bias-reduced estimates. The
  dashed black line is the main diagonal, the solid red line is a
  scatterplot smoother.}
\end{figure}


The resulting coefficient estimates, standard errors, and
log-likelihoods can be displayed using the \fct{summary} method and are
reported in Table~\ref{tab:ReadingSkills-bias}. All three estimators
give very similar results for the mean submodel. In the precision
submodel, main effects are slightly dampened and the interaction
effect is slightly amplified when using
BC/BR. Figure~\ref{fig:readingskillsbias} shows the scatter plots of
the logarithm of the estimated precision parameters based on the ML,
BC, and BR estimates. It is apparent that the logarithms of the
estimated precision parameters based on the bias-corrected and
bias-reduced estimates are mildly shrunk towards zero. This is a
similar but much milder effect compared to the one described in
\cite{betareg:Kosmidis+Firth:2010}. The reason that the effect is
milder in this particular example relates to the fact that bias for
the precision parameters is corrected/reduced on the log-scale where
the ML estimator has a more symmetric distribution than on the
original scale.

To emphasize that BC/BR may potentially be crucial for
empirical analyses, Appendix~\ref{sec:gasoline} replicates the results
of \cite{betareg:Kosmidis+Firth:2010} for a beta regression where
substantial upward bias was detected for the ML estimator of the
precision parameter, which in turn causes underestimated asymptotic
standard errors; note the direct dependence of the expected
information matrix on the precision parameters in \eqref{eq:expinfo}.

For the reading accuracy data, the similarity of the results in
Table~\ref{tab:ReadingSkills-bias} between the three different
estimation methods and Figure~\ref{fig:readingskillsbias} is
reassuring and illustrates that analysis based on the ML estimator
would not be influenced by bias-related issues. Furthermore, the
effect of BC/BR becomes even smaller when the model without
interaction in the precision submodel \citep[as chosen
by][]{betareg:Smithson+Verkuilen:2006} is considered.

\subsection{Beta regression tree}

For illustrating the use of model-based recursive partitioning methods
we assume the following situation: A researcher wants to assess whether
the relationship between reading \code{accuracy} and nonverbal \code{iq}
score is  different for some subgroups in the data. Covariates potentially describing
these subgroups are available but no prior knowledge how exactly the
subgroups can be described by these covariates. For
investigating the ability of the tree to select suitable variables
for partitioning, \code{dyslexia} is considered as a partitioning variable
along with three additional randomly generated noise variables. One noise
variable is drawn from a
standard normal distribution, one from a uniform distribution and the
third is a categorical variable which takes two different values with
equal probability.
%
<<ReadingSkills-noise, echo=TRUE>>=
set.seed(1071)
n <- nrow(ReadingSkills)
ReadingSkills$x1 <- rnorm(n)
ReadingSkills$x2 <- runif(n)
ReadingSkills$x3 <- factor(sample(0:1, n, replace = TRUE))
@
%
The model-based tree is fitted using \fct{betatree}. The first
argument is a formula which specifies the model to be partitioned: We have
a beta regression where both the mean and the precision of \code{accuracy} depend on
\code{iq}. The second argument is a formula
for the symbolic description of the partitioning variables and both
formulas are evaluated using \code{data}. Additional control arguments
for the recursive partitioning method used in \fct{mob\_control} can
be specified via the \code{\dots} argument. In this case the minimum
number of observations in a node is given by \code{minsplit = 10}.
%
<<ReadingSkills-tree, echo=TRUE, eval=FALSE>>=
rs_tree <- betatree(accuracy ~ iq | iq, ~ dyslexia + x1 + x2 + x3,
  data = ReadingSkills, minsplit = 10)
@
%
<<ReadingSkills-tree0, echo=FALSE, results=hide>>=
if(cache & file.exists("betareg-ext-betatree.rda")) {
  load("betareg-ext-betatree.rda")
} else {
<<ReadingSkills-tree>>
if(cache) {
  save(rs_tree, file = "betareg-ext-betatree.rda")
} else {
  if(file.exists("betareg-ext-betatree.rda")) file.remove("betareg-ext-betatree.rda")
}
}
@
%
Alternatively the model could be specified using a three-part formula
where the third part is the symbolic description of the partitioning
variables.
%
<<ReadingSkills-tree2, echo=TRUE, eval=FALSE>>=
rs_tree <- betatree(accuracy ~ iq | iq | dyslexia + x1 + x2 + x3,
  data = ReadingSkills, minsplit = 10)
@
%
The returned object is of class \code{"\Sexpr{class(rs_tree)}"} which
contains an object of class
\code{"\Sexpr{class(rs_tree[["mob"]])}"}. All methods for
\code{"\Sexpr{class(rs_tree[["mob"]])}"} can be reused, e.g., the
\fct{print} method and the \fct{plot} method (see
Figure~\ref{fig:betatree}).
%
<<ReadingSkills-tree3, echo=TRUE>>=
plot(rs_tree)
@

\begin{figure}[t!]
\centering
\setkeys{Gin}{width=\textwidth}
<<ReadingSkills-tree-plot, fig=TRUE, height=7, width=10, echo=FALSE>>=
plot(rs_tree)
@
\caption{\label{fig:betatree} Partitioned beta regression model for the
  \code{ReadingSkills} data.}
\end{figure}
%
Figure~\ref{fig:betatree} indicates that the data was only split into
two subsamples. None of the three noise variables was selected in
order to perform a split, but only variable \code{dyslexia}. This
indicates that the relationship between the IQ score and the reading
accuracy does not depend on the noise variables as expected. By
contrast, the relationship between these two variables differ for
dyslexic and nondyslexic children. The beta regressions fitted to each
of the two groups of children are illustrated in the two leaf
nodes. Note that the fitted models use the IQ score as predictor for
the mean and the precision. Hence the results are
equivalent to the ML results from Table~\ref{tab:ReadingSkills-bias}
(where sum contrasts are employed for \code{dyslexia}). Function
\fct{coef} allows to inspect the parameters of the fitted models, by
default in the terminal nodes (nodes~2 and 3).
%
<<ReadingSkills-tree-coef>>=
coef(rs_tree)
@

If the fitted object is printed the output indicates after the number
of the node, which part of the data according to the split is
contained (e.g., \code{dyslexia == \{no\}}) or the weights of the
observations in the terminal nodes indicated by stars. In the terminal
nodes also the estimated parameters of the beta regression models are
provided.
%
<<ReadingSkills-tree3, echo=TRUE>>=
rs_tree
@

The output above confirms that in the nondyslexic group there is a
positive association of both mean accuracy and the precision with IQ
score.  In the dyslexic group, the mean accuracy is generally lower
with almost no dependence on IQ score while precision is higher and
slightly decreasing with IQ score. Some further details could be
revealed by considering for example \code{summary(rs_tree, node = 3)}
that provides the usual regression model summary (unadjusted for
recursive partitioning) for the model associated with node~3.

To gain further insight into the recursive construction of the beta
regression tree, we use the results of the parameter instability tests
in all three nodes. The test statistics together with the
corresponding $p$~values can be obtained using function \fct{sctest}
(for structural change test).  This indicates which partitioning
variables in each node exhibited significant instability and the
reason for performing no further split, i.e., either because all
parameter instability tests were insignificant (see node~2) or because
the node size is too small for a further split (see node~3).
%
<<ReadingSkills-tree-sctest>>=
sctest(rs_tree)
@
%
In node~1 only dyslexia shows significant instability while the noise
variables are all insignificant. In node~2, dyslexia cannot be used
for splitting anymore and all other variables are still
insignificant and thus the partitioning stops.  With only 19~observations,
node~3 is considered too small to warrant further splitting given that \code{minsplit = 10}
requires that each node contains at least 10 observations and hence no
tests are carried out.



\subsection{Latent class beta regression}

For illustrating the use of finite mixture models
we assume the following situation: A researcher wants to assess whether
the relationship between reading \code{accuracy} and nonverbal \code{iq}
score is  different for some subgroups in the data without having
further covariates potentially describing the groups available.
In particular, we assume that the information whether the children are
dyslexic or not is not available. Modeling the relationship between
reading accuracy and IQ score is now complicated by the fact that
latent groups exist in the data where this relationship is
different.

The group of nondyslexic children is challenging as some of them
essentially have a perfect reading accuracy while for others accuracy
is strongly increasing with the IQ score. In a model with observed
\code{dyslexia}, this can be captured by different variances in the
two groups. However, issues arise when \code{dyslexia} is unobserved
and a mixture model is employed to infer the groups. Specifically, the
subgroup with perfect reading score will typically be selected as one
component of the mixture whose variance converges to zero leading to
an unbounded likelihood. To address this issue we fit a finite mixture
model with three components, where one component is used to capture
those children who have a perfect reading accuracy test
score. Following \cite{betareg:Smithson+Merkle+Verkuilen:2011} this
additional component is assumed to follow a uniform distribution on
the interval \code{coef} $\pm$ \code{delta}.
%
<<ReadingSkills-mix, echo=TRUE, eval=FALSE>>=
rs_mix <- betamix(accuracy ~ iq, data = ReadingSkills, k = 3,
  extra_components = extraComponent(type = "uniform",
    coef = 0.99, delta = 0.01), nstart = 10)
@
%
<<ReadingSkills-mix2, echo=FALSE, results=hide>>=
if(cache & file.exists("betareg-ext-betamix.rda")) {
 load("betareg-ext-betamix.rda")
} else {
<<ReadingSkills-mix>>
if(cache) {
  save(rs_mix, file = "betareg-ext-betamix.rda")
} else {
  if(file.exists("betareg-ext-betamix.rda")) file.remove("betareg-ext-betamix.rda")
}
}
@
%
The argument \code{nstart} is set to
\Sexpr{rs_mix$flexmix@control@nrep}. This implies that the EM
algorithm is run \Sexpr{rs_mix$flexmix@control@nrep} times, with each
run being randomly initialized. Then only the best solution according
to the log-likelihood is returned. In this way, the chance that the
global optimum is detected is increased (the EM algorithm is generally
only guaranteed to converge to a local optimum and the convergence
behaviour depends on the initialization).

The returned fitted model is of class \code{"\Sexpr{class(rs_mix)}"}
and has methods for \Sexpr{betamix_methods}. These methods reuse
functionality already available for finite mixture models that are
directly fitted using \fct{flexmix} from package \pkg{flexmix}. The
\fct{print} method shows the function call and provides information on
how many observations are assigned to each of the components based on
the values of the posterior probabilities. Furthermore, the
convergence status of the EM algorithm is reported, and in the case of
convergence, the number of iterations that were performed is shown.
% it is indicated
% if the EM algorithm converged or not and in the case of convergence
% how many iterations were performed.
%
<<ReadingSkills-mix3>>=
rs_mix
@
%
The \fct{summary} method provides more information on the estimated
coefficients and their estimated standard errors. For the calculation
of the latter, function \fct{optim} is used for the numerical
approximation of the corresponding Hessian matrix.
%
<<ReadingSkills-mix4>>=
summary(rs_mix)
@
%
Because only two components are freely estimated and the parameters
for the third component were fixed a-priori, the detailed information
on the estimated parameters is only provided for components 1 and
2. The regression part for the mean indicates that in the first
component the IQ score does not significantly affect the achieved
accuracy, while there is a positive significant effect of the
IQ score on accuracy in the second component.

<<ReadingSkills-betamix-plot1, eval = FALSE, echo=FALSE, fig=TRUE>>=
ix <- as.numeric(ReadingSkills$dyslexia)
col1 <- hcl(c(260, 0), 90, 40)[ix]
col2 <- hcl(c(260, 0), 10, 95)[ix]
plot(accuracy ~ iq, data = ReadingSkills, col = col2, pch = 19,
  cex = 1.5, xlim = c(-2, 2), main = "Partitioned model (dyslexia observed)")
points(accuracy ~ iq, data = ReadingSkills, cex = 1.5, pch = 1, col = col1)
@

\begin{figure}[t!]
\centering
\setkeys{Gin}{width=\textwidth}
<<ReadingSkills-betamix-plot3, echo=FALSE, fig=TRUE, height=5.5, width=10>>=
par(mfrow = c(1, 2))
ix <- as.numeric(ReadingSkills$dyslexia)
prob <- 2 * (posterior(rs_mix)[cbind(seq_along(ix), clusters(rs_mix))] - 0.5)
col3 <- hcl(c(0, 260, 130), 65, 45, fixup = FALSE)
col1 <- col3[clusters(rs_mix)]
col2 <- hcl(c(0, 260, 130)[clusters(rs_mix)], 65 * abs(prob)^1.5, 95 - 50 * abs(prob)^1.5, fixup = FALSE)
plot(accuracy ~ iq, data = ReadingSkills, col = col2, pch = 19, cex = 1.5,
  xlim = c(-2, 2), main = "Mixture model (dyslexia unobserved)")
points(accuracy ~ iq, data = ReadingSkills, cex = 1.5, pch = 1, col = col1)
iq <- -30:30/10
cf <- rbind(coef(rs_mix, model = "mean", component = 1:2), c(qlogis(0.99), 0))
for(i in 1:3) lines(iq, plogis(cf[i, 1] + cf[i, 2] * iq), lwd = 2, col = col3[i])
<<ReadingSkills-betamix-plot1>>
cf <- coef(rs_tree, model = "mean")
col3 <- hcl(c(260, 0), 90, 40)
for(i in 1:2) lines(iq, plogis(cf[i, 1] + cf[i, 2] * iq), lwd = 2, col = col3[i])
@
\caption{\label{fig:betamix} Fitted regression lines for the mixture
  model with three components and the observations shaded according to
  their posterior probabilities (left). Fitted regression lines
  for the partitioned beta regression model with shading according to
  the observed \code{dyslexic} variable where nondyslexic and dyslexic
  children are in blue and red, respectively (right).}
\end{figure}

A cross-tabulation of the cluster assignments of the mixture model
with the variable \code{dyslexia} indicates that no dyslexic children
are assigned to the third component. Furthermore, children assigned to
the first component have a high probability
(\Sexpr{round(prop.table(table(clusters(rs_mix),ReadingSkills$dyslexia),1)[1,2]*100)}\%)
of being dyslexic.
%
<<ReadingSkills-mix5>>=
table(clusters(rs_mix), ReadingSkills$dyslexia)
@
%
The fitted mean regression lines for each of the three components are
provided in Figure~\ref{fig:betamix} (left). The observations are
shaded according to the magnitude of the corresponding posterior
probabilities. The stronger the shading of an observation is in red,
the higher the posterior probability for this observation being
from the first component is. Blue shading corresponds to the second
component and green to the third. For comparison purposes, the right
plot in Figure~\ref{fig:betamix} shows the mean regression lines for
the dyslexic and nondyslexic children as obtained by recursive partitioning
-- or equivalently for the model where an
interaction with the variable \code{dyslexic} is specified in the
regressions for mean and precision.

The fitted regression lines for the dyslexic children (red) and the
latent group capturing the dyslexic children (component 1) are very similar.
% The fitted regression lines for the dyslexic children as well as the
% latent group capturing the dyslexic children (component~1) are very
% similar as indicated by the comparison of the two red lines.
In contrast, the group of nondyslexic children is modeled
differently. With observed dyslexia, the heterogeneity in the control
group is captured by differences in the precision submodel, i.e.,
in the variance. However, for unobserved dyslexia, it is more natural
to capture the increased heterogeneity in the control group using two
components, one of which would correspond to perfect reading accuracy
irrespective of the IQ score.


\section{Conclusions}\label{sec:conclusions}

The new extensions of the package \pkg{betareg} allow to move beyond
classical ML inference when fitting beta regression models. Bias
correction and bias reduction of the ML estimates can be useful
alternatives when the ML inferences turn out to be
unreliable, and actually their ready availability in the package
allows users to check how sensitive inferences (standard errors, confidence
intervals and Wald tests, in particular) can be to the bias of the
ML estimator. Recursive partitioning methods and
finite mixture models enable the user to investigate heterogeneity --
both observed and unobserved -- in the regression model fitted to the
whole sample.

For users already familiar with previous versions of the
\pkg{betareg} package, obtaining the bias-corrected/reduced estimators
is straightforward; the user only needs to appropriately specify the
\code{type} argument (which defaults to \code{"ML"}).
%
For the implementation of the aforementioned extensions some changes
and additions in the fitting function \fct{betareg.fit} were
necessary. Specifically, the optimization of the likelihood is now
followed by a Fisher scoring iteration. Furthermore, if the
bias-reduced or bias-corrected estimates are requested, that Fisher
scoring iteration is accordingly modified using a bias adjustment.

To fit beta regression trees and finite mixtures of beta regressions
the new functions \fct{betatree} and \fct{betamix} are available in
package \pkg{betareg}. These functions borrow functionality from the
packages \pkg{party} and \pkg{flexmix}. The interface of the two new
functions has been designed to be as similar as possible to
\fct{betareg}, in order to facilitate their use by users that are
already familiar with the \fct{betareg} function.
%
For modeling heterogeneity \fct{betareg.fit} is reused to fit the
models in the nodes when beta regression trees are constructed, and in
the M-step when finite mixture models are fitted. For this task, only
a small amount of additional code --- some \proglang{S4} glue --- was
necessary to inherit the functionality provided by the \pkg{party} and
\pkg{flexmix} packages to the package \pkg{betareg}.

Overall, the increased flexibility of the extended package
\pkg{betareg} enables users to conveniently check model suitability
and appropriateness of the resultant inferences. With the extended
package users can easily compare the results from a beta regression
model fitted using ML estimation to those using bias
correction/reduction, and draw conclusions incorporating observed or
unobserved heterogeneity in their models.

\section*{Acknowledgments}

BG gratefully acknowledges financial support from the Austrian Science
Fund (FWF): V170-N18.

\bibliography{betareg}

\newpage

\begin{appendix}

\section{Bias correction/reduction for gasoline yield data} \label{sec:gasoline}

To illustrate how upward bias in the ML estimator of the precision parameter
in beta regressions can severely affect inference, results from
\cite{betareg:Kosmidis+Firth:2010} are replicated. All three flavors of estimators
(ML, BC, and BR) are computed for the fixed-precision beta regression
model considered in \cite{betareg:Ferrari+Cribari-Neto:2004} (also replicated
in \citealp{betareg:Cribari-Neto+Zeileis:2010}):
%
<<GasolineYield-bias>>=
data("GasolineYield", package = "betareg")
gy <- lapply(c("ML", "BC", "BR"), function(x)
  betareg(yield ~ batch + temp, data = GasolineYield, type = x))
@
%
\begin{table}[b!]
\centering
\begin{tabular}{lrrrrrr}
  \hline
  & \multicolumn{2}{c}{Maximum likelihood} & \multicolumn{2}{c}{Bias correction} & \multicolumn{2}{c}{Bias reduction} \\ \hline
<<ReadingSkills-bias-table, echo=FALSE, results=tex>>=
cf <- matrix(paste("$", format(round(sapply(gy, coef), digits = 5), nsmall = 5), "$\\phantom{)}", sep = ""), ncol = 3)
se <- matrix(gsub(" ", "",
  paste("(", format(round(sapply(gy, function(x) sqrt(diag(vcov(x)))), digits = 5), nsmall = 5), ")", sep = ""),
  fixed = TRUE), ncol = 3)
cfse <- cbind(cf[,1], se[,1], cf[,2], se[,2], cf[,3], se[,3])
cfse <- cbind(
  c(paste("$\\beta_{", 1:11, "}$", sep = ""), "$\\phi$"),
  cfse[, 1:5],
  paste(cfse[,6],
    c(rep("\\\\", 11), "\\\\ \\hline")))
writeLines(apply(cfse, 1, paste, collapse = " & "))
@

\end{tabular}
\caption{\label{tab:GasolineYield-bias} ML, BC and BR estimates and
  corresponding estimated standard errors (in parentheses) for a
  logit-linked beta regression model for the gasoline yield data. The
  precision parameter $\phi$ is assumed to be equal across the
  observations.}
\end{table}
%
The estimate of the precision parameter shrinks considerably when bias
correction/reduction is used, indicating a large upward bias for the
ML estimator of $\phi$.
%
<<GasolineYield-phi>>=
sapply(gy, coef, model = "precision")
@
%
while the log-likelihood does not change much
%
<<GasolineYield-phi>>=
sapply(gy, logLik)
@
%
This results in much larger standard errors (and hence smaller test
statistics and larger $p$~values) for all coefficients in the mean
part of the model. Table~\ref{tab:GasolineYield-bias} replicates
\citet[Table~1]{betareg:Kosmidis+Firth:2010}.  The picture does also
not change much when a log-link is used in the precision model, see
below and Table~\ref{tab:GasolineYield-bias2} replicating
\citet[Table~3]{betareg:Kosmidis+Firth:2010}.

<<GasolineYield-bias2>>=
data("GasolineYield", package = "betareg")
gy2 <- lapply(c("ML", "BC", "BR"), function(x)
  betareg(yield ~ batch + temp | 1, data = GasolineYield, type = x))
sapply(gy2, logLik)
@

\begin{table}[t!]
\centering
\begin{tabular}{lrrrrrr}
  \hline
  & \multicolumn{2}{c}{Maximum likelihood} & \multicolumn{2}{c}{Bias correction} & \multicolumn{2}{c}{Bias reduction} \\ \hline
<<ReadingSkills-bias-table, echo=FALSE, results=tex>>=
cf <- matrix(paste("$", format(round(sapply(gy2, coef), digits = 5), nsmall = 5), "$\\phantom{)}", sep = ""), ncol = 3)
se <- matrix(gsub(" ", "",
  paste("(", format(round(sapply(gy2, function(x) sqrt(diag(vcov(x)))), digits = 5), nsmall = 5), ")", sep = ""),
  fixed = TRUE), ncol = 3)
cfse <- cbind(cf[,1], se[,1], cf[,2], se[,2], cf[,3], se[,3])
cfse <- cbind(
  c(paste("$\\beta_{", 1:11, "}$", sep = ""), "$\\log\\phi$"),
  cfse[, 1:5],
  paste(cfse[,6],
    c(rep("\\\\", 11), "\\\\ \\hline")))
writeLines(apply(cfse, 1, paste, collapse = " & "))
@

\end{tabular}
\caption{\label{tab:GasolineYield-bias2} ML, BC and BR estimates and
  corresponding estimated standard errors (in parentheses) for a
  logit-linked beta regression model for the gasoline yield
  data. Precision is estimated on the log-scale and is assumed to be
  equal across the observations.}
\end{table}


\end{appendix}

\end{document}
